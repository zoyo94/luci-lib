name: Auto Update Submodules for luci-lib

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '30 8 * * *'  # 每天 UTC 0 点执行

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout luci-lib repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 浅拉取主仓库，减少耗时
          token: ${{ secrets.PAT }}  # 使用 PAT 授权

      - name: 初始化并浅拉取所有子模块（默认分支）
        run: |
          git submodule init
          # 对所有子模块执行浅拉取（默认分支最新1个提交）
          git submodule update --depth 1 --recursive

      - name: 单独处理 openclash 子模块（切换到 dev 分支，浅拉取）
        run: |
          echo "=== 开始处理 openclash 子模块（dev 分支） ==="
          cd openclash || { echo "openclash 子模块目录不存在"; exit 1; }
          
          # 配置远程仓库跟踪 dev 分支
          git config remote.origin.fetch "+refs/heads/dev:refs/remotes/origin/dev"
          
          # 浅拉取 dev 分支最新1个提交（保持浅克隆特性）
          git fetch --depth 1 origin dev
          
          # 切换到 dev 分支（强制创建本地分支，基于远程 dev）
          git checkout -B dev origin/dev
          cd ..  # 返回主仓库根目录

      - name: 更新其他子模块到远程最新版本（浅拉取）
        run: |
          echo "=== 更新其他子模块到最新版本 ==="
          # 排除 openclash（已单独处理），更新其他子模块
          git submodule foreach '[[ "$path" != "openclash" ]] && git pull --depth 1 origin $(git rev-parse --abbrev-ref HEAD)'

      - name: 提交子模块更新
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 添加所有子模块相关变更
          git add .gitmodules */.git
          git commit -m "Auto: Update submodules (openclash: dev branch, others: latest)" || echo "无更新可提交"
          
          # 推送到仓库
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
